import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞
async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    result = random.randint(1, 6)

    if choices:
        response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\nüëâ {choices[result - 1]}"
    else:
        response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}"

    await query.edit_message_text(text=response)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
welcome_messages = [
    "–ú—ã —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–æ—à–ª–æ–º –æ–ø—ã—Ç–µ –∏ —à–∞–≥–∞–µ–º –ø–æ –æ–¥–Ω–∏–º–∏ –∏ —Ç–µ–º –∂–µ –¥–æ—Ä–æ–∂–∫–∞–º.\n–î–æ–±–∞–≤—å –≤ –¥–µ–Ω—å –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏ üòâ\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Ç—Ä–∞—Ç–∏–º, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ: –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –Ω–µ –∑–≤–æ–Ω–∏—Ç—å, —á–∞–π –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞?\n–î–æ–≤–µ—Ä—å—Å—è —É–¥–∞—á–µ, –ø—É—Å—Ç—å –∫—É–±–∏–∫ –ø–æ–¥—Å–∫–∞–∂–µ—Ç.\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–ï—Å–ª–∏ –≤—Å—ë –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ ‚Äî –∂–∏–∑–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π.\n–ü–æ–ø—Ä–æ–±—É–π –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–ª—É—á–∞—é üé≤\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è ‚Äî —ç—Ç–æ –∫—É–±–∏–∫. –ü—Ä–∞–≤–¥–∞-–ø—Ä–∞–≤–¥–∞!\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
]

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
async def run_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    greeting = random.choice(welcome_messages)
    keyboard = [
        [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll")],
        [InlineKeyboardButton("üì¶ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="set_choices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(greeting, reply_markup=reply_markup)

# –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    result = random.randint(1, len(choices))
    response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\nüëâ {choices[result - 1]}"
    await query.edit_message_text(text=response)

# –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
async def set_choices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    global choices
    choices = [
        "–ü–æ—á–∏—Ç–∞—Ç—å",
        "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ",
        "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É",
        "–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è",
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–ª–∏–∑–∫–æ–º—É",
        "–í—ã–ø–∏—Ç—å —á–∞–π"
    ]
    await query.edit_message_text("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    choices = []

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(run_bot, pattern="^run_bot$"))
    app.add_handler(CallbackQueryHandler(roll_dice, pattern="^roll$"))
    app.add_handler(CallbackQueryHandler(set_choices, pattern="^set_choices$"))

    app.run_polling()

