import os
import logging
import random
import asyncio
from fastapi import FastAPI
import uvicorn
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
choices = []

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
welcome_messages = [
    "–ú—ã —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–æ—à–ª–æ–º –æ–ø—ã—Ç–µ –∏ —à–∞–≥–∞–µ–º –ø–æ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –¥–æ—Ä–æ–∂–∫–∞–º.\n–î–æ–±–∞–≤—å –≤ –¥–µ–Ω—å –Ω–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏ üòâ\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –º—ã —Ç—Ä–∞—Ç–∏–º, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ: –∑–≤–æ–Ω–∏—Ç—å –∏–ª–∏ –Ω–µ –∑–≤–æ–Ω–∏—Ç—å, —á–∞–π –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞?\n–î–æ–≤–µ—Ä—å—Å—è —É–¥–∞—á–µ, –ø—É—Å—Ç—å –∫—É–±–∏–∫ –ø–æ–¥—Å–∫–∞–∂–µ—Ç.\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–ï—Å–ª–∏ –≤—Å—ë –≤—Ä–µ–º—è –≤—ã–±–∏—Ä–∞—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ ‚Äî –∂–∏–∑–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π.\n–ü–æ–ø—Ä–æ–±—É–π –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–ª—É—á–∞—é üé≤\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    "–ò–Ω–æ–≥–¥–∞ –ª—É—á—à–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è ‚Äî —ç—Ç–æ –∫—É–±–∏–∫. –ü—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—å—Å—è.\n\n–ù–∞–∑–Ω–∞—á—å –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –∫—É–±–∏–∫ ‚Äî –æ—Å–≤–æ–±–æ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
]

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if context.user_data.get("started"):
        return
    context.user_data["started"] = True

    greeting = random.choice(welcome_messages)
    keyboard = [[InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="run_bot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —á—É—Ç–æ—á–∫—É –ª–µ–≥—á–µ‚ú®",
        reply_markup=reply_markup
    )
    await update.message.reply_text(greeting)

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
async def run_bot_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll")],
        [InlineKeyboardButton("üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="set_choices")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

# –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if not choices:
        result = random.randint(1, 6)
        await query.edit_message_text(text=f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}")
    else:
        result = random.randint(1, len(choices))
        response = f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\nüëâ {choices[result - 1]}"
        await query.edit_message_text(text=response)

# –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
async def set_choices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    global choices
    choices = [
        "–ü–æ—á–∏—Ç–∞—Ç—å",
        "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ",
        "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É",
        "–ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è",
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–ª–∏–∑–∫–æ–º—É",
        "–í—ã–ø–∏—Ç—å —á–∞–π"
    ]
    await query.edit_message_text("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–ø—Ü–∏–π (–≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞)
async def handle_custom_choices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global choices
    text = update.message.text
    choices = [line.strip() for line in text.split('\n') if line.strip()]
    await update.message.reply_text("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")

# FastAPI –¥–ª—è Render
app_fastapi = FastAPI()

@app_fastapi.get("/")
async def root():
    return {"status": "Bot is running"}

async def launch_bot():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(run_bot_button, pattern="^run_bot$"))
    app.add_handler(CallbackQueryHandler(roll_dice, pattern="^roll$"))
    app.add_handler(CallbackQueryHandler(set_choices, pattern="^set_choices$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_choices))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

@app_fastapi.on_event("startup")
async def on_start():
    asyncio.create_task(launch_bot())

if __name__ == "__main__":
    uvicorn.run("bot:app_fastapi", host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

