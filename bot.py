import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

choices = []

welcome_messages = [
    "–ú—ã —á–∞—Å—Ç–æ –¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–æ—à–ª–æ–º –æ–ø—ã—Ç–µ –∏ —à–∞–≥–∞–µ–º‚Ä¶ [–∏ –¥–∞–ª–µ–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è].",
    # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã‚Ä¶
]

def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("started"):
        return
    context.user_data["started"] = True
    greeting = random.choice(welcome_messages)
    update.message.reply_text(greeting)
    keyboard = [
        [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll")],
        [InlineKeyboardButton("üìÜ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="set_choices")]
    ]
    update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    query.answer()
    if not choices:
        result = random.randint(1, 6)
        query.edit_message_text(f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}")
    else:
        result = random.randint(1, len(choices))
        query.edit_message_text(f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result}\nüëâ {choices[result - 1]}")

def set_choices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        "–ù–∞–ø–∏—à–∏ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª; –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É; –ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–ª–∏–∑–∫–æ–º—É; –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Å–∞–Ω—ã; –í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ; –ü–æ–π—Ç–∏ –Ω–∞ –º–∞—Å—Å–∞–∂."
    )

def handle_custom_choices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global choices
    text = update.message.text
    choices = [line.strip() for line in text.split('\n') if line.strip()]
    keyboard = [[InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data="roll")]]
    update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–ª—è —Å–ª—É—á–∞—è üé≤", 
                              reply_markup=InlineKeyboardMarkup(keyboard))

if __name__ == "__main__":
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(roll_dice, pattern="^roll$"))
    app.add_handler(CallbackQueryHandler(set_choices, pattern="^set_choices$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_choices))
    app.run_polling()  # ‚úÖ –í—Å—ë, –±–µ–∑ `await`, –±–µ–∑ webhooks, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
